/*
********************
* HGui Test Script *
* Fabio Falcucci   *
*    Feb-2023      *
********************
  This script is used as a test and to show how it's possible to use the
helper function 
  HGui.Theme.SetGlobalTheme()
to globally change the theme for a specific gadget class, in this case for
DROPDOWN gadgets.
-------------------

HGui.Theme.SetGlobalTheme(GadgetType, Theme)
  Set the specified theme to the given gadget class
*/

; INCLUDE THE LIBRARIES DEFINITIONS
@INCLUDE "../../+Includes.hws"
@INCLUDE #INC_HGUI

; Creates a new HGui window
Local myWin = HGui.Window:new(
                { title = "HGui.Theme.SetGlobalTheme()",
                  name  = "myWindow",
                  position   = { x = #CENTER, y = #CENTER }
                  })
                   
; Disable auto-rendering to avoid flickering
HGui.SetAutoRendering(False)

; Let's create 2 skins that we will use with our DROPDOWN gadget
Local current, skins = 0, {}
skins = { [0] = { nSkin = HGui.Theme.Generate_SkinBevel(GFX.BevelType_Standard, GFX.BevelFx_Raised, 1, $44EEEE, $008888, $33DDDD),
                  hSkin = HGui.Theme.Generate_SkinBevel(GFX.BevelType_Standard, GFX.BevelFx_Raised, 1, $bbbbbb, $666666, $ffeedd),
                  pSkin = HGui.Theme.Generate_SkinBevel(GFX.BevelType_Standard, GFX.BevelFx_Recessed, 1, $EEEEEE, $888888, $AAAAAA),
                  dSkin = HGui.Theme.Generate_SkinBevel(GFX.BevelType_Standard, GFX.BevelFx_Raised, 1, $EEEEEE, $888888, $BBBBBB),
                  nText = HGui.Theme.Generate_Text(18, #ANTIALIAS, $000000, #HGUI_ALIGN_CENTER, False, False),
                  hText = HGui.Theme.Generate_Text(18, #ANTIALIAS, $000000, #HGUI_ALIGN_CENTER, False, True),
                  pText = HGui.Theme.Generate_Text(18, #ANTIALIAS, $000000, #HGUI_ALIGN_CENTER, False, True),
                  dText = HGui.Theme.Generate_Text(18, #ANTIALIAS, $666666, #HGUI_ALIGN_CENTER, False, False),
                  WindowBGColor = $440000,
                  entryHeight = 60,
                  WindowBorders = 2,
                  alternateLines = False,
                  lvfont = { name = #SANS, style = #ANTIALIAS, color = 000044, sizeOffset = -30 },
                  lvBGColors = { odd = $ffffff, even = $dddddd }
                  },
          [1] = { nSkin = HGui.Theme.Generate_SkinDoubleGradient($444444, $DDDDDD, 3),
                  hSkin = HGui.Theme.Generate_SkinDoubleGradient($DDDDDD, $444444, 3),
                  pSkni = HGui.Theme.Generate_SkinBevel(GFX.BevelType_Standard, GFX.BevelFx_Recessed, 1, $FFFFFF, $666666, $AAAAAA),
                  dSkin = HGui.Theme.Generate_SkinBevel(GFX.BevelType_Standard, GFX.BevelFx_Raised, 1, $EEEEEE, $888888, $BBBBBB),
                  nText = HGui.Theme.Generate_Text(16, #ANTIALIAS, $000000, #HGUI_ALIGN_CENTER, False, False),
                  hText = HGui.Theme.Generate_Text(18, #ANTIALIAS+#BOLD, $000000, #HGUI_ALIGN_CENTER, False, True),
                  pText = HGui.Theme.Generate_Text(20, #ANTIALIAS+#BOLD, $000000, #HGUI_ALIGN_CENTER, True, True),
                  dText = HGui.Theme.Generate_Text(16, #ANTIALIAS, $666666, #HGUI_ALIGN_CENTER, False, False),
                  WindowBGColor = $44FF00,
                  entryHeight = 18,
                  WindowBorders = 1,
                  alternateLines = True,
                  lvfont = { name = #MONOSPACE, style = #ANTIALIAS+#BOLD, color = $440000, sizeOffset = 0 },
                  lvBGColors = { odd = $ffff88, even = $dddd55 }
                  }
          }

; We are going to create a DROPDOWN for our test and a button we will use
; to rotate the skins we have defined above.
Local myDDown = HGui.Gadget:new(#HGUI_DROPDOWN_GADGET, 
                { Value = { "Click ME", "I'm a DropDown" },
                  Column = 0,
                  Data = 
                    { ColumnSizes = { 400 },
                      Headers     = { "Number" },
                      Items       = { { "Number One" }, 
                                      { "Number Two" }, 
                                      { "Number Three" } },
                      SortOrder   = 
                        { Columns = { 0 },
                          Descending  = { False } }
                      }
                    })

Local myButton = HGui.Gadget:new(#HGUI_BUTTON_GADGET, 
  { caption = { "Click me", "to change the BUTTON skin"},
    actions = {
      onpushed =
        Function(gadObj)
          ; Change the dropdown skin everytime the button is pushed
          HGui.Theme.SetGlobalTheme(#HGUI_DROPDOWN_GADGET, skins[current])
          current = current+1
          If current > 1 Then current = 0
        EndFunction }
      })


; Let's arrange the gadgets into the window
mywin.rootgadget:layoutSet({ gadgets = { myDDown, myButton },
                             weights = { 0.20, 0.80 },
                             gap     = 1
                             }, True )
                             
; Finally enable the auto-rendering and refresh the window
HGui.SetAutoRendering(True)
myWin:Render()
                 
Repeat
   WaitEvent()
Forever
