/*******************************************************************************
HGUI : Tutorial 309 - Gadget's :set() method                 v1.0 : 11/09/2017 *
********************************************************************************
The :set() method is used for modify any gadget's property, you need to study
the gadgets data structure to learn each available property, in this example we
will modify few of them.
The :set() method accepts two arguments:
  changeList    A table of all properties to change
  update        A flag to force an immediate update, usually you have to set
                it to TRUE.
*******************************************************************************/

@INCLUDE "../../+Includes.hws"
@INCLUDE #INC_HGUI

Local myWin = HGui.Window:new(
                { title = "Gadget's :set() method",
                  name  = "myWindow",
                  position   = { x = #CENTER, y = #CENTER }
                  })

Function ChangeProperties(obj)
  ; This function is called automatically when the button will
  ; be pushed.
  ; To change the look of the button we will use an utility function
  ; of the HGui library. We also generate some random colors to see
  ; that effectively these changes are applied.
  obj:set({ caption = { "MESSING UP COLORS!", ":-)" },
            look = { nskin = HGui.Theme.Generate_SkinBevel(GFX.BevelType_Standard, GFX.BevelFx_Raised, Rnd(3)+1, GetRandomColor(), GetRandomColor(), GetRandomColor()),
                     hskin = HGui.Theme.Generate_SkinBevel(GFX.BevelType_Standard, GFX.BevelFx_Raised, Rnd(3)+1, GetRandomColor(), GetRandomColor(), GetRandomColor()),
                     pskin = HGui.Theme.Generate_SkinBevel(GFX.BevelType_Standard, GFX.BevelFx_Raised, Rnd(3)+1, GetRandomColor(), GetRandomColor(), GetRandomColor()) }}, True)
EndFunction


HGui.SetAutoRendering(False)

Local myLabel  = HGui.Gadget:new(#HGUI_LABEL_GADGET, 
  { name = "myLabel", 
    caption = { "When you will click the button", "some of its properties", "will be changed randomly!" } })

; Let's create a dummy button for our interaction
Local b1 = HGui.Gadget:new(#HGUI_BUTTON_GADGET, 
  { caption = { "CLICK ME!"},
    actions = { OnPushed = ChangeProperties }
    })

; Attach the label and the button to the window
mywin.rootgadget:layoutSet({ gadgets = { myLabel, b1 },
                             weights = { 0.70, 0.30 },
                             gap     = 1
                             }, True )
                             
HGui.SetAutoRendering(True)
myWin:Render()
                 
Repeat
   WaitEvent()
Forever
